<?php
use \Drupal\Core\Field\BaseFieldDefinition;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\scitalk_base\ScitalkServices\ReferenceIDGeneratorInterface;


/**
 * Implements hook_entity_base_field_info
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @return NULL[]
 */
function scitalk_base_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
      $fields = array();
      $fields['scitalk_bogus_field_type'] = BaseFieldDefinition::create('string')
        ->setLabel(t('The text'))
        ->setDescription(t('A text property added by scitalk.'))
        ->setDefaultValue('test')
        ->setInitialValue('tst')
        ->setComputed(TRUE)
        ->setClass('\\Drupal\\scitalk_base\\Plugin\FieldItemList\SciTalkEntityComputedText');
      return $fields;
    }
}

/**
 * Implements hook_entity_bundle_field_info_alter
 */
function scitalk_base_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  //add Unique constraints for fied field_talk_number in Talks and field_collection_number in taxonomies Series and Collection
  if ($bundle == 'talk') {
    if (isset($fields['field_talk_number'])) {
      // Use the ID as defined in the annotation of the constraint definition
      $fields['field_talk_number']->addConstraint('UniqueTalkNumber', []);
    }
  }
  else if ($bundle == 'collection') {
    if (isset($fields['field_collection_number'])) {
      $fields['field_collection_number']->addConstraint('UniqueCollectionNumber');
    }
  }
  else if ($bundle == 'series') {
    if (isset($fields['field_collection_number'])) {
      $fields['field_collection_number']->addConstraint('UniqueSeriesNumber');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave()
 */
function scitalk_base_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getType() == 'talk') {
    //when creating a new Talk, if there is no talk number in the entity yet, then create one and assign it to the field.
    if ($entity->isNew()) {
      $entity_talk_number = $entity->field_talk_number->value ?? '';
      if (empty($entity_talk_number)) {
          $idGenerator = \Drupal::service('scitalk_base.reference_id_generator');

          $year =  date('y');
          $month = date('m');
          $year = substr($year, -2); //just chops it off at 2 to be sure
          $month = substr($month, -2);

          //call service to generate talk id:
          $talk_num = $idGenerator->generateReferenceId($entity, $year, $month);
          //add it to the entity:
          $entity->set('field_talk_number', $talk_num);
      }

      if (_scitalk_base_use_doi($entity)) {
        //when creating a new Talk, create a Draft DOI
        $doi = \Drupal::service('scitalk_base.datacite_dois');
        $doi_id = $doi->create($entity);
  
        if (empty($entity->get('field_talk_doi')->value)) {
          $entity->set('field_talk_doi', $doi_id);
        }
      }
    }
    else {
      if (_scitalk_base_use_doi($entity)) {
        //update DOI
        $doi = \Drupal::service('scitalk_base.datacite_dois');
        $doi_id = $doi->update($entity);
  
        if (empty($entity->get('field_talk_doi')->value)) {
          $entity->set('field_talk_doi', $doi_id);
        }
      }
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_presave()
 */
function scitalk_base_taxonomy_term_presave(Drupal\taxonomy\Entity\Term $taxonomy) {
   //collection and series have collection_number so check for those two terms and create a collection number for them if none exists
  if (in_array( $taxonomy->getVocabularyId() , ['collection', 'series'])) {
    if ($taxonomy->isNew()) {
        $input_coll_number = $taxonomy->get('field_collection_number')->value ?? '';   //$taxonomy->get('field_collection_number')->getValue();
        if (empty($input_coll_number)) {
          $idGenerator = \Drupal::service('scitalk_base.reference_id_generator');
          $collection_number = $idGenerator->generateReferenceId($taxonomy);
          $taxonomy->set('field_collection_number', $collection_number);
        }
    }
  }
}

//check whether to create/update DOIs for this type of entity Talk
function _scitalk_base_use_doi(\Drupal\Core\Entity\EntityInterface $entity) {
  $config = \Drupal::config('scitalk_base.settings');
  $doi_enabled = $config->get('use_doi');

  //if DOI config is not enabled then no
  if (!$doi_enabled) return false;

  //if DOI config is on then check if this Talk type is configured to create DOIs
  $create_doi_for_this_talk_type = false;
  $talk_type = $entity->field_talk_type->target_id ?? 0;
  if (!empty($talk_type)) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($talk_type);
    $create_doi_for_this_talk_type = $term->field_create_doi->value ?? false;
  }

  return $create_doi_for_this_talk_type;
}